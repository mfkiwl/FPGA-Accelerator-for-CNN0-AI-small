-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity convolve_weights_cud_rom is 
    generic(
             DWIDTH     : integer := 9; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 175
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of convolve_weights_cud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "000000010", 1 => "000010101", 2 => "111100000", 3 => "101110101", 
    4 => "000000110", 5 => "001000000", 6 => "000111100", 7 => "000010101", 
    8 => "001001010", 9 => "110110101", 10 => "110001000", 11 => "000111001", 
    12 => "000111000", 13 => "000111001", 14 => "001000000", 15 => "000100101", 
    16 => "110011000", 17 => "110101000", 18 => "111111011", 19 => "000100000", 
    20 => "001000110", 21 => "000010100", 22 => "000000011", 23 => "110010111", 
    24 => "111001111", 25 => "000111010", 26 => "000111000", 27 => "000011111", 
    28 => "111110111", 29 => "110101101", 30 => "110101001", 31 => "111000100", 
    32 => "000111000", 33 => "000011010", 34 => "001100101", 35 => "111010010", 
    36 => "111000100", 37 => "001011010", 38 => "110000111", 39 => "001000100", 
    40 => "000101001", 41 => "000001111", 42 => "000110100", 43 => "000110111", 
    44 => "000100110", 45 => "110101111", 46 => "111101001", 47 => "000001011", 
    48 => "000010101", 49 => "000101110", 50 => "001001010", 51 => "000001100", 
    52 => "111001000", 53 => "000011111", 54 => "001000111", 55 => "001101101", 
    56 => "000101010", 57 => "000010010", 58 => "111010011", 59 => "111000100", 
    60 => "000000001", 61 => "000101100", 62 => "000110011", 63 => "111100111", 
    64 => "110111111", 65 => "110011111", 66 => "111011000", 67 => "000001110", 
    68 => "000110010", 69 => "000000111", 70 => "111011001", 71 => "110011110", 
    72 => "001011000", 73 => "110010010", 74 => "111110111", 75 => "111011100", 
    76 => "111100111", 77 => "000100011", 78 => "000001000", 79 => "001011111", 
    80 => "111000100", 81 => "000000100", 82 => "000000001", 83 => "000001000", 
    84 => "000100100", 85 => "001011100", 86 => "001100101", 87 => "111011100", 
    88 => "000001111", 89 => "111100011", 90 => "000100011", 91 => "000011001", 
    92 => "001011110", 93 => "001010110", 94 => "000000011", 95 => "000000000", 
    96 => "000010010", 97 => "111100111", 98 => "111110010", 99 => "111011100", 
    100 => "111111111", 101 => "001001110", 102 => "000010111", 103 => "000100010", 
    104 => "110110110", 105 => "111010110", 106 => "110111001", 107 => "000001100", 
    108 => "110111011", 109 => "000111100", 110 => "110110011", 111 => "101111101", 
    112 => "000101110", 113 => "111001111", 114 => "111111010", 115 => "111100001", 
    116 => "111110100", 117 => "111000111", 118 => "111011101", 119 => "000010000", 
    120 => "000011011", 121 => "000111011", 122 => "000011100", 123 => "000000011", 
    124 => "111001001", 125 => "110110111", 126 => "111101111", 127 => "000110010", 
    128 => "000011000", 129 => "000101111", 130 => "000010001", 131 => "111001111", 
    132 => "110010110", 133 => "111101111", 134 => "000110010", 135 => "000011101", 
    136 => "001100101", 137 => "000101001", 138 => "000001111", 139 => "110010110", 
    140 => "001000101", 141 => "110100000", 142 => "110100110", 143 => "000011010", 
    144 => "000010010", 145 => "111101101", 146 => "110101001", 147 => "000001101", 
    148 => "110100110", 149 => "111100100", 150 => "000111011", 151 => "000010000", 
    152 => "000000010", 153 => "110101011", 154 => "000110100", 155 => "000001001", 
    156 => "000010001", 157 => "001011011", 158 => "000101000", 159 => "111000101", 
    160 => "111000000", 161 => "000100100", 162 => "000111110", 163 => "000001101", 
    164 => "000101111", 165 => "000011011", 166 => "111101010", 167 => "111101110", 
    168 => "000110010", 169 => "000100110", 170 => "000110000", 171 => "001010011", 
    172 => "000111011", 173 => "111001000", 174 => "110110000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity convolve_weights_cud is
    generic (
        DataWidth : INTEGER := 9;
        AddressRange : INTEGER := 175;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of convolve_weights_cud is
    component convolve_weights_cud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    convolve_weights_cud_rom_U :  component convolve_weights_cud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


