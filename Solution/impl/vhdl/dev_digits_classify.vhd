-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dev_digits_classify is
generic (
    C_S_AXI_A_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_A_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_a_AWVALID : IN STD_LOGIC;
    s_axi_a_AWREADY : OUT STD_LOGIC;
    s_axi_a_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_A_ADDR_WIDTH-1 downto 0);
    s_axi_a_WVALID : IN STD_LOGIC;
    s_axi_a_WREADY : OUT STD_LOGIC;
    s_axi_a_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_A_DATA_WIDTH-1 downto 0);
    s_axi_a_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_A_DATA_WIDTH/8-1 downto 0);
    s_axi_a_ARVALID : IN STD_LOGIC;
    s_axi_a_ARREADY : OUT STD_LOGIC;
    s_axi_a_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_A_ADDR_WIDTH-1 downto 0);
    s_axi_a_RVALID : OUT STD_LOGIC;
    s_axi_a_RREADY : IN STD_LOGIC;
    s_axi_a_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_A_DATA_WIDTH-1 downto 0);
    s_axi_a_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_a_BVALID : OUT STD_LOGIC;
    s_axi_a_BREADY : IN STD_LOGIC;
    s_axi_a_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of dev_digits_classify is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dev_digits_classify,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.677437,HLS_SYN_LAT=340389,HLS_SYN_TPT=none,HLS_SYN_MEM=25,HLS_SYN_DSP=10,HLS_SYN_FF=2675,HLS_SYN_LUT=6835,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (62 downto 0) := "000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (62 downto 0) := "000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (62 downto 0) := "000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (62 downto 0) := "000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (62 downto 0) := "000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (62 downto 0) := "000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (62 downto 0) := "000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (62 downto 0) := "000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (62 downto 0) := "000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (62 downto 0) := "001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (62 downto 0) := "010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (62 downto 0) := "100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv12_80 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv12_7FF : STD_LOGIC_VECTOR (11 downto 0) := "011111111111";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv20_FFFFF : STD_LOGIC_VECTOR (19 downto 0) := "11111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv8_9E : STD_LOGIC_VECTOR (7 downto 0) := "10011110";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv12_FF9 : STD_LOGIC_VECTOR (11 downto 0) := "111111111001";
    constant ap_const_lv12_7 : STD_LOGIC_VECTOR (11 downto 0) := "000000000111";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv12_C : STD_LOGIC_VECTOR (11 downto 0) := "000000001100";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_const_lv12_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000000101";
    constant ap_const_lv12_6 : STD_LOGIC_VECTOR (11 downto 0) := "000000000110";
    constant ap_const_lv54_3FFFFFFFFFFFFF : STD_LOGIC_VECTOR (53 downto 0) := "111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal softmax_out_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal softmax_out_V_ce0 : STD_LOGIC;
    signal softmax_out_V_we0 : STD_LOGIC;
    signal biases_dense10_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal biases_dense10_V_ce0 : STD_LOGIC;
    signal biases_dense10_V_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_dense10_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_dense10_V_ce0 : STD_LOGIC;
    signal weights_dense10_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_fu_426_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_1998 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_2003 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_476_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_2016 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond2_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_cast_fu_499_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_reg_2026 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_shl3_cast_fu_509_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_reg_2031 : STD_LOGIC_VECTOR (7 downto 0);
    signal OP1_V_fu_513_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal OP1_V_reg_2036 : STD_LOGIC_VECTOR (20 downto 0);
    signal j_2_fu_527_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_2_reg_2044 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond4_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weights_dense10_V_lo_reg_2054 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_Val2_4_fu_1989_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_4_reg_2059 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal condensed_10_out_V_a_1_reg_2064 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_79_reg_2069 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_reg_2074 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_Val2_6_reg_2083 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_80_reg_2088 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_746_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_2097 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal condensed_10_out_V_a_2_reg_2102 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_tr_cast_fu_757_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_26_tr_cast_reg_2107 : STD_LOGIC_VECTOR (18 downto 0);
    signal condensed_10_out_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_2_reg_2112 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal is_neg_reg_2119 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_2125 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal p_Val2_7_fu_779_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_7_reg_2130 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_fu_817_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_15_reg_2136 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_19_reg_2141 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_fu_829_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_reg_2146 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp32_V_3_fu_897_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_3_reg_2151 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp32_V_6_fu_905_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_6_reg_2156 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_13_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_2161 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_x_assign_fu_963_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_x_assign_reg_2166 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_415_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_assign_reg_2171 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal isneg_reg_2176 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal exp_tmp_V_reg_2186 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_63_fu_996_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_63_reg_2191 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_24_fu_1000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_2196 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_1006_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_20_reg_2204 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal p_Result_6_fu_1016_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_6_reg_2209 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_1020_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_reg_2214 : STD_LOGIC_VECTOR (53 downto 0);
    signal F2_fu_1026_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_2219 : STD_LOGIC_VECTOR (11 downto 0);
    signal QUAN_INC_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal QUAN_INC_reg_2228 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_1060_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_2234 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_37_fu_1068_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_reg_2241 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_cast_fu_1084_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_amt_cast_reg_2246 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_27_fu_1087_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_2251 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_fu_1092_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_65_reg_2257 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_69_reg_2263 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_14_fu_1170_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_14_reg_2269 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_70_reg_2275 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_reg_2281 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_1208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_reg_2288 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos1_fu_1214_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pos1_reg_2294 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_43_fu_1232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_reg_2299 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_1246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_reg_2306 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_fu_1272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_1_reg_2313 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_74_reg_2320 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_fu_1286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_reg_2325 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_1292_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_48_reg_2331 : STD_LOGIC_VECTOR (53 downto 0);
    signal Range2_V_1_fu_1296_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal Range2_V_1_reg_2336 : STD_LOGIC_VECTOR (53 downto 0);
    signal Range1_all_zeros_1_fu_1308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_reg_2342 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_fu_1326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp11_reg_2347 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_15_fu_1390_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_15_reg_2353 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal neg_src_0_i_i_fu_1607_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_src_0_i_i_reg_2360 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_1637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_reg_2366 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge121_demorgan_s_fu_1643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge121_demorgan_s_reg_2372 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_1823_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal i_2_fu_1837_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_2386 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_4_fu_1843_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_2391 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_1831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal this_assign_7_1_fu_1981_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal this_assign_7_1_reg_2406 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal max_pooled_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal max_pooled_out_V_ce0 : STD_LOGIC;
    signal max_pooled_out_V_we0 : STD_LOGIC;
    signal max_pooled_out_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal condensed_64_out_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal condensed_64_out_ce0 : STD_LOGIC;
    signal condensed_64_out_we0 : STD_LOGIC;
    signal condensed_64_out_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal condensed_10_out_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal condensed_10_out_V_ce0 : STD_LOGIC;
    signal condensed_10_out_V_we0 : STD_LOGIC;
    signal condensed_10_out_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolve_fu_387_ap_start : STD_LOGIC;
    signal grp_convolve_fu_387_ap_done : STD_LOGIC;
    signal grp_convolve_fu_387_ap_idle : STD_LOGIC;
    signal grp_convolve_fu_387_ap_ready : STD_LOGIC;
    signal grp_convolve_fu_387_in_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_convolve_fu_387_in_V_ce0 : STD_LOGIC;
    signal grp_convolve_fu_387_outpool_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolve_fu_387_outpool_V_ce0 : STD_LOGIC;
    signal grp_convolve_fu_387_outpool_V_we0 : STD_LOGIC;
    signal grp_convolve_fu_387_outpool_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_densifyto64_fu_399_ap_start : STD_LOGIC;
    signal grp_densifyto64_fu_399_ap_done : STD_LOGIC;
    signal grp_densifyto64_fu_399_ap_idle : STD_LOGIC;
    signal grp_densifyto64_fu_399_ap_ready : STD_LOGIC;
    signal grp_densifyto64_fu_399_in_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_densifyto64_fu_399_in_V_ce0 : STD_LOGIC;
    signal grp_densifyto64_fu_399_out_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_densifyto64_fu_399_out_V_ce0 : STD_LOGIC;
    signal grp_densifyto64_fu_399_out_V_we0 : STD_LOGIC;
    signal grp_densifyto64_fu_399_out_V_d0 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_reg_318 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal i_reg_329 : STD_LOGIC_VECTOR (6 downto 0);
    signal j3_reg_341 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_17_reg_353 : STD_LOGIC_VECTOR (11 downto 0);
    signal i4_reg_365 : STD_LOGIC_VECTOR (3 downto 0);
    signal i5_reg_376 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal grp_convolve_fu_387_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_densifyto64_fu_399_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_8_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_2_cast_fu_465_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal this_assign_5_1_fu_731_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_16_fu_1732_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_1_fu_437_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_451_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_cast_cast_fu_447_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_cast_cast_fu_455_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_1_fu_459_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_487_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_fu_491_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_fu_503_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j3_cast_fu_517_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp10_fu_533_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp69_cast_fu_538_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal index_fu_542_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_567_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_12_cast_fu_575_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_5_fu_579_p2 : STD_LOGIC_VECTOR (20 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of p_Val2_5_fu_579_p2 : signal is "no";
    signal tmp_16_fu_610_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_8_fu_613_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal newsignbit_fu_618_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_not_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_carry_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i1_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp70_demorgan_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_692_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp11_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_mux_fu_715_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_8_31_fu_723_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_fu_774_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_3_fu_785_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_4_fu_795_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_zeros_fu_803_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal msb_idx_fu_811_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal msb_idx_1_fu_833_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_29_fu_843_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal msb_idx_1_cast_fu_839_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_fu_859_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_862_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_874_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_38_fu_878_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_45_fu_884_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_s_fu_888_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp32_V_1_fu_868_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp32_V_2_fu_893_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_fu_909_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_fu_925_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp7280_cast_fu_932_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_1_trunc_fu_936_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_941_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_5_fu_948_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_959_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_assign_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_974_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_22_fu_1009_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_64_fu_1032_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_25_fu_1048_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_26_fu_1054_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_22_fu_1079_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_32_fu_1106_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_33_fu_1110_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_28_fu_1096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_66_fu_1116_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal storemerge_fu_1120_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_39_fu_1135_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_53_cast_fu_1140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_fu_1144_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_12_fu_1127_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal qb_fu_1152_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_1166_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp7_fu_1184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_1101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp74_cast_cast_fu_1195_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal exp_V_fu_1074_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_41_fu_1202_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pos2_fu_1223_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_72_fu_1238_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos1_cast_fu_1219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_1252_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_46_fu_1256_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal lD_fu_1262_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_1266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pos2_cast_fu_1228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_not_fu_1314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_1302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp10_fu_1320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_1332_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_1335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp2_fu_1350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_1355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_1360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_1365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_1344_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp9_fu_1378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_1371_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_67_fu_1340_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp1_fu_1383_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp73_demorgan_fu_1397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_1401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_1421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_1431_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal or_cond115_i_i_fu_1426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_1436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_1_i_s_fu_1441_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_1458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_1463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond117_i_i_fu_1449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_1453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp12_fu_1478_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_119_i_i_fu_1474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_122_i_i_fu_1468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_fu_1491_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_i_i_fu_1407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_2_i_s_fu_1483_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_2_i_fu_1498_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp24_not_fu_1514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_1520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_not_i_i_fu_1525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_1_no_fu_1530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_75_fu_1548_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge123_i_i_fu_1536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_2_mu_fu_1542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_120_i_i_fu_1555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_2_i_fu_1569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_1561_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp14_fu_1581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_1_fu_1413_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_1592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp16_fu_1603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_fu_1575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp15_fu_1598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_1_fu_1506_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_1_not_fu_1615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_0_not_s_fu_1621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i2_fu_1626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_1632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_0_i_i_fu_1586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge121_i_i_fu_1649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_1654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_src_0_i_i_not_fu_1664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_1669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i1_fu_1659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_1693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_1_33_fu_1686_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp58_demorgan_fu_1705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp17_fu_1698_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal brmerge4_fu_1674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp19_fu_1716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_1721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp20_fu_1727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_21_mux_fu_1679_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sel_tmp18_fu_1709_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_55_fu_1741_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_56_fu_1745_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_18_fu_1749_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_19_fu_1763_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal newsignbit_2_fu_1769_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_1_fu_1755_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_fu_1777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_27_not_fu_1795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i3_fu_1789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_1783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge5_fu_1801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_25_mux_fu_1807_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_2_34_fu_1815_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1856_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1856_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1856_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_83_fu_1869_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_fu_1889_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal newsignbit_3_fu_1881_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_fu_1899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_2_fu_1861_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i1_fu_1905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_1911_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not38_i_fu_1929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newsignbit_0_not_i_fu_1923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge39_i_fu_1935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_1941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_2_fu_1917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_6_not_fu_1953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_1947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_9_fu_1873_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal brmerge6_fu_1959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_11_mux_fu_1965_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_s_36_fu_1973_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_4_fu_1989_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1856_ap_start : STD_LOGIC;
    signal grp_fu_1856_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (62 downto 0);

    component convolve IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_V_ce0 : OUT STD_LOGIC;
        in_V_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
        outpool_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        outpool_V_ce0 : OUT STD_LOGIC;
        outpool_V_we0 : OUT STD_LOGIC;
        outpool_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        outpool_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component densifyto64 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        in_V_ce0 : OUT STD_LOGIC;
        in_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
        out_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        out_V_ce0 : OUT STD_LOGIC;
        out_V_we0 : OUT STD_LOGIC;
        out_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        out_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component dev_digits_classincg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dev_digits_classiocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component dev_digits_classipcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dev_digits_classiqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (18 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component dev_digits_classihbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component dev_digits_classiibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component dev_digits_classijbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component dev_digits_classikbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component dev_digits_classilbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component dev_digits_classimb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (11 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component dev_digits_classify_a_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_V_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        input_V_ce0 : IN STD_LOGIC;
        input_V_q0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        softmax_out_V_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        softmax_out_V_ce0 : IN STD_LOGIC;
        softmax_out_V_we0 : IN STD_LOGIC;
        softmax_out_V_d0 : IN STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    biases_dense10_V_U : component dev_digits_classiibs
    generic map (
        DataWidth => 7,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => biases_dense10_V_address0,
        ce0 => biases_dense10_V_ce0,
        q0 => biases_dense10_V_q0);

    weights_dense10_V_U : component dev_digits_classijbC
    generic map (
        DataWidth => 9,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => weights_dense10_V_address0,
        ce0 => weights_dense10_V_ce0,
        q0 => weights_dense10_V_q0);

    dev_digits_classify_a_s_axi_U : component dev_digits_classify_a_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_A_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_A_DATA_WIDTH)
    port map (
        AWVALID => s_axi_a_AWVALID,
        AWREADY => s_axi_a_AWREADY,
        AWADDR => s_axi_a_AWADDR,
        WVALID => s_axi_a_WVALID,
        WREADY => s_axi_a_WREADY,
        WDATA => s_axi_a_WDATA,
        WSTRB => s_axi_a_WSTRB,
        ARVALID => s_axi_a_ARVALID,
        ARREADY => s_axi_a_ARREADY,
        ARADDR => s_axi_a_ARADDR,
        RVALID => s_axi_a_RVALID,
        RREADY => s_axi_a_RREADY,
        RDATA => s_axi_a_RDATA,
        RRESP => s_axi_a_RRESP,
        BVALID => s_axi_a_BVALID,
        BREADY => s_axi_a_BREADY,
        BRESP => s_axi_a_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_V_address0 => grp_convolve_fu_387_in_V_address0,
        input_V_ce0 => grp_convolve_fu_387_in_V_ce0,
        input_V_q0 => input_V_q0,
        softmax_out_V_address0 => softmax_out_V_address0,
        softmax_out_V_ce0 => softmax_out_V_ce0,
        softmax_out_V_we0 => softmax_out_V_we0,
        softmax_out_V_d0 => this_assign_7_1_reg_2406);

    max_pooled_out_V_U : component dev_digits_classikbM
    generic map (
        DataWidth => 12,
        AddressRange => 343,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => max_pooled_out_V_address0,
        ce0 => max_pooled_out_V_ce0,
        we0 => max_pooled_out_V_we0,
        d0 => grp_convolve_fu_387_outpool_V_d0,
        q0 => max_pooled_out_V_q0);

    condensed_64_out_U : component dev_digits_classilbW
    generic map (
        DataWidth => 12,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => condensed_64_out_address0,
        ce0 => condensed_64_out_ce0,
        we0 => condensed_64_out_we0,
        d0 => grp_densifyto64_fu_399_out_V_d0,
        q0 => condensed_64_out_q0);

    condensed_10_out_V_U : component dev_digits_classimb6
    generic map (
        DataWidth => 12,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => condensed_10_out_V_address0,
        ce0 => condensed_10_out_V_ce0,
        we0 => condensed_10_out_V_we0,
        d0 => condensed_10_out_V_d0,
        q0 => condensed_10_out_V_q0);

    grp_convolve_fu_387 : component convolve
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_convolve_fu_387_ap_start,
        ap_done => grp_convolve_fu_387_ap_done,
        ap_idle => grp_convolve_fu_387_ap_idle,
        ap_ready => grp_convolve_fu_387_ap_ready,
        in_V_address0 => grp_convolve_fu_387_in_V_address0,
        in_V_ce0 => grp_convolve_fu_387_in_V_ce0,
        in_V_q0 => input_V_q0,
        outpool_V_address0 => grp_convolve_fu_387_outpool_V_address0,
        outpool_V_ce0 => grp_convolve_fu_387_outpool_V_ce0,
        outpool_V_we0 => grp_convolve_fu_387_outpool_V_we0,
        outpool_V_d0 => grp_convolve_fu_387_outpool_V_d0,
        outpool_V_q0 => max_pooled_out_V_q0);

    grp_densifyto64_fu_399 : component densifyto64
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_densifyto64_fu_399_ap_start,
        ap_done => grp_densifyto64_fu_399_ap_done,
        ap_idle => grp_densifyto64_fu_399_ap_idle,
        ap_ready => grp_densifyto64_fu_399_ap_ready,
        in_V_address0 => grp_densifyto64_fu_399_in_V_address0,
        in_V_ce0 => grp_densifyto64_fu_399_in_V_ce0,
        in_V_q0 => max_pooled_out_V_q0,
        out_V_address0 => grp_densifyto64_fu_399_out_V_address0,
        out_V_ce0 => grp_densifyto64_fu_399_out_V_ce0,
        out_V_we0 => grp_densifyto64_fu_399_out_V_we0,
        out_V_d0 => grp_densifyto64_fu_399_out_V_d0,
        out_V_q0 => condensed_64_out_q0);

    dev_digits_classincg_U16 : component dev_digits_classincg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp32_V_3_reg_2151,
        ce => ap_const_logic_1,
        dout => grp_fu_409_p1);

    dev_digits_classiocq_U17 : component dev_digits_classiocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => v_assign_reg_2171,
        dout => d_assign_fu_412_p1);

    dev_digits_classipcA_U18 : component dev_digits_classipcA
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_0,
        din1 => p_x_assign_reg_2166,
        ce => ap_const_logic_1,
        dout => grp_fu_415_p2);

    dev_digits_classiqcK_U19 : component dev_digits_classiqcK
    generic map (
        ID => 1,
        NUM_STAGE => 23,
        din0_WIDTH => 19,
        din1_WIDTH => 12,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_1856_ap_start,
        done => grp_fu_1856_ap_done,
        din0 => grp_fu_1856_p0,
        din1 => grp_fu_1856_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1856_p2);

    dev_digits_classihbi_U20 : component dev_digits_classihbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 12,
        dout_WIDTH => 21)
    port map (
        din0 => weights_dense10_V_lo_reg_2054,
        din1 => p_Val2_4_fu_1989_p1,
        dout => p_Val2_4_fu_1989_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_convolve_fu_387_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_convolve_fu_387_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_convolve_fu_387_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolve_fu_387_ap_ready = ap_const_logic_1)) then 
                    grp_convolve_fu_387_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_densifyto64_fu_399_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_densifyto64_fu_399_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_densifyto64_fu_399_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_densifyto64_fu_399_ap_ready = ap_const_logic_1)) then 
                    grp_densifyto64_fu_399_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i4_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond2_fu_470_p2 = ap_const_lv1_1))) then 
                i4_reg_365 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                i4_reg_365 <= i_3_reg_2097;
            end if; 
        end if;
    end process;

    i5_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_740_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i5_reg_376 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                i5_reg_376 <= i_2_reg_2386;
            end if; 
        end if;
    end process;

    i_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_420_p2 = ap_const_lv1_1))) then 
                i_reg_329 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond4_fu_521_p2 = ap_const_lv1_1))) then 
                i_reg_329 <= i_1_reg_2016;
            end if; 
        end if;
    end process;

    j3_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j3_reg_341 <= j_2_reg_2044;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j3_reg_341 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_reg_318 <= j_1_reg_1998;
            elsif (((grp_densifyto64_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_reg_318 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_Val2_17_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond2_fu_470_p2 = ap_const_lv1_1))) then 
                p_Val2_17_reg_353 <= ap_const_lv12_80;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                p_Val2_17_reg_353 <= sum_V_fu_1823_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                F2_reg_2219 <= F2_fu_1026_p2;
                QUAN_INC_reg_2228 <= QUAN_INC_fu_1042_p2;
                    p_Result_6_reg_2209(51 downto 0) <= p_Result_6_fu_1016_p1(51 downto 0);
                sh_amt_reg_2234 <= sh_amt_fu_1060_p3;
                    tmp_20_reg_2204(10 downto 0) <= tmp_20_fu_1006_p1(10 downto 0);
                tmp_37_reg_2241 <= tmp_37_fu_1068_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                OP1_V_reg_2036 <= OP1_V_fu_513_p1;
                    p_shl3_cast_reg_2031(6 downto 1) <= p_shl3_cast_fu_509_p1(6 downto 1);
                    p_shl_cast_reg_2026(8 downto 3) <= p_shl_cast_fu_499_p1(8 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                Range1_all_ones_1_reg_2313 <= Range1_all_ones_1_fu_1272_p2;
                Range1_all_zeros_1_reg_2342 <= Range1_all_zeros_1_fu_1308_p2;
                Range2_V_1_reg_2336 <= Range2_V_1_fu_1296_p2;
                p_Val2_14_reg_2269 <= p_Val2_14_fu_1170_p2;
                pos1_reg_2294 <= pos1_fu_1214_p2;
                rev_reg_2306 <= rev_fu_1246_p2;
                sel_tmp11_reg_2347 <= sel_tmp11_fu_1326_p2;
                sel_tmp8_reg_2281 <= sel_tmp8_fu_1189_p2;
                sh_amt_cast_reg_2246 <= sh_amt_cast_fu_1084_p1;
                tmp_27_reg_2251 <= tmp_27_fu_1087_p2;
                tmp_42_reg_2288 <= tmp_42_fu_1208_p2;
                tmp_43_reg_2299 <= tmp_43_fu_1232_p2;
                tmp_47_reg_2325 <= tmp_47_fu_1286_p2;
                    tmp_48_reg_2331(31 downto 0) <= tmp_48_fu_1292_p1(31 downto 0);
                tmp_65_reg_2257 <= tmp_65_fu_1092_p1;
                tmp_69_reg_2263 <= p_Val2_12_fu_1127_p3(11 downto 11);
                tmp_70_reg_2275 <= p_Val2_14_fu_1170_p2(11 downto 11);
                tmp_74_reg_2320 <= pos2_fu_1223_p2(11 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                brmerge121_demorgan_s_reg_2372 <= brmerge121_demorgan_s_fu_1643_p2;
                neg_src_0_i_i_reg_2360 <= neg_src_0_i_i_fu_1607_p3;
                overflow_1_reg_2366 <= overflow_1_fu_1637_p2;
                p_Val2_15_reg_2353 <= p_Val2_15_fu_1390_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                condensed_10_out_V_a_1_reg_2064 <= tmp_7_fu_552_p1(4 - 1 downto 0);
                p_Val2_4_reg_2059 <= p_Val2_4_fu_1989_p2;
                tmp_79_reg_2069 <= p_Val2_4_fu_1989_p2(7 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (exitcond3_fu_740_p2 = ap_const_lv1_0))) then
                condensed_10_out_V_a_2_reg_2102 <= tmp_s_fu_752_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                exp_tmp_V_reg_2186 <= ireg_V_fu_970_p1(62 downto 52);
                isneg_reg_2176 <= ireg_V_fu_970_p1(63 downto 63);
                tmp_24_reg_2196 <= tmp_24_fu_1000_p2;
                tmp_63_reg_2191 <= tmp_63_fu_996_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_1_reg_2016 <= i_1_fu_476_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                i_2_reg_2386 <= i_2_fu_1837_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_3_reg_2097 <= i_3_fu_746_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                is_neg_reg_2119 <= condensed_10_out_V_q0(11 downto 11);
                p_Val2_2_reg_2112 <= condensed_10_out_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_1_reg_1998 <= j_1_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                j_2_reg_2044 <= j_2_fu_527_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((isneg_reg_2176 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                man_V_1_reg_2214 <= man_V_1_fu_1020_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                p_Val2_6_reg_2083 <= p_Val2_5_fu_579_p2(19 downto 8);
                signbit_reg_2074 <= p_Val2_5_fu_579_p2(20 downto 20);
                tmp_80_reg_2088 <= p_Val2_5_fu_579_p2(19 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                p_Val2_7_reg_2130 <= p_Val2_7_fu_779_p3;
                tmp_15_reg_2136 <= tmp_15_fu_817_p1;
                tmp_19_reg_2141 <= msb_idx_fu_811_p2(31 downto 31);
                tmp_3_reg_2125 <= tmp_3_fu_769_p2;
                tmp_53_reg_2146 <= tmp_53_fu_829_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                p_x_assign_reg_2166 <= p_x_assign_fu_963_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                this_assign_7_1_reg_2406 <= this_assign_7_1_fu_1981_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (tmp_3_reg_2125 = ap_const_lv1_0))) then
                tmp32_V_3_reg_2151 <= tmp32_V_3_fu_897_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) and (tmp_3_reg_2125 = ap_const_lv1_0))) then
                tmp32_V_6_reg_2156 <= tmp32_V_6_fu_905_p1;
                tmp_13_reg_2161 <= tmp_13_fu_919_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_740_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                tmp_26_tr_cast_reg_2107 <= tmp_26_tr_cast_fu_757_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond_fu_1831_p2 = ap_const_lv1_0))) then
                    tmp_4_reg_2391(3 downto 0) <= tmp_4_fu_1843_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_420_p2 = ap_const_lv1_0))) then
                    tmp_reg_2003(3 downto 0) <= tmp_fu_432_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                v_assign_reg_2171 <= grp_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                weights_dense10_V_lo_reg_2054 <= weights_dense10_V_q0;
            end if;
        end if;
    end process;
    tmp_reg_2003(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_shl_cast_reg_2026(2 downto 0) <= "000";
    p_shl_cast_reg_2026(9) <= '0';
    p_shl3_cast_reg_2031(0) <= '0';
    p_shl3_cast_reg_2031(7) <= '0';
    tmp_20_reg_2204(11) <= '0';
    p_Result_6_reg_2209(53 downto 52) <= "01";
    tmp_48_reg_2331(53 downto 32) <= "0000000000000000000000";
    tmp_4_reg_2391(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, exitcond1_fu_420_p2, ap_CS_fsm_state7, exitcond2_fu_470_p2, ap_CS_fsm_state9, exitcond4_fu_521_p2, ap_CS_fsm_state14, exitcond3_fu_740_p2, ap_CS_fsm_state39, exitcond_fu_1831_p2, grp_convolve_fu_387_ap_done, grp_densifyto64_fu_399_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_convolve_fu_387_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_densifyto64_fu_399_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_420_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond2_fu_470_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond4_fu_521_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state14 => 
                if (((exitcond3_fu_740_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state39 => 
                if (((exitcond_fu_1831_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_1026_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(tmp_20_fu_1006_p1));
        OP1_V_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(condensed_64_out_q0),21));

    QUAN_INC_fu_1042_p2 <= "1" when (signed(tmp_64_fu_1032_p4) > signed(ap_const_lv9_0)) else "0";
    Range1_all_ones_1_fu_1272_p2 <= (tmp_43_fu_1232_p2 and tmp5_fu_1266_p2);
    Range1_all_ones_2_i_fu_1569_p2 <= (carry_1_i_i_fu_1407_p2 and Range1_all_ones_2_i_s_fu_1483_p3);
    Range1_all_ones_2_i_s_fu_1483_p3 <= 
        Range1_all_ones_fu_1453_p2 when (or_cond117_i_i_fu_1449_p2(0) = '1') else 
        sel_tmp12_fu_1478_p3;
    Range1_all_ones_2_mu_fu_1542_p2 <= (carry_1_not_i_i_fu_1525_p2 and Range1_all_ones_2_i_s_fu_1483_p3);
    Range1_all_ones_fu_1453_p2 <= (Range2_all_ones_1_i_s_fu_1441_p3 and Range1_all_ones_1_reg_2313);
    Range1_all_zeros_1_fu_1308_p2 <= "1" when (p_Val2_22_fu_1079_p3 = ap_const_lv54_0) else "0";
    Range1_all_zeros_2_i_fu_1498_p3 <= 
        p_122_i_i_fu_1468_p2 when (or_cond117_i_i_fu_1449_p2(0) = '1') else 
        sel_tmp13_fu_1491_p3;
    Range1_all_zeros_fu_1463_p2 <= (ap_const_lv1_1 xor Range1_all_ones_1_reg_2313);
    Range2_V_1_fu_1296_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_22_fu_1079_p3),to_integer(unsigned('0' & tmp_48_fu_1292_p1(31-1 downto 0)))));
    Range2_all_ones_1_i_s_fu_1441_p3 <= 
        Range2_all_ones_fu_1436_p2 when (or_cond115_i_i_fu_1426_p2(0) = '1') else 
        rev1_fu_1421_p2;
    Range2_all_ones_1_no_fu_1530_p2 <= (ap_const_lv1_1 xor Range2_all_ones_1_i_s_fu_1441_p3);
    Range2_all_ones_fu_1436_p2 <= "1" when (Range2_V_1_reg_2336 = r_V_fu_1431_p2) else "0";
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state39, exitcond_fu_1831_p2)
    begin
        if (((exitcond_fu_1831_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state39, exitcond_fu_1831_p2)
    begin
        if (((exitcond_fu_1831_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    biases_dense10_V_address0 <= tmp_fu_432_p1(4 - 1 downto 0);

    biases_dense10_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            biases_dense10_V_ce0 <= ap_const_logic_1;
        else 
            biases_dense10_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge121_demorgan_s_fu_1643_p2 <= (newsignbit_1_fu_1413_p3 and deleted_ones_0_i_i_fu_1586_p2);
    brmerge121_i_i_fu_1649_p2 <= (brmerge121_demorgan_s_reg_2372 xor ap_const_lv1_1);
    brmerge123_i_i_fu_1536_p2 <= (carry_1_not_i_i_fu_1525_p2 or Range2_all_ones_1_no_fu_1530_p2);
    brmerge39_i_fu_1935_p2 <= (p_not38_i_fu_1929_p2 or newsignbit_0_not_i_fu_1923_p2);
    brmerge40_demorgan_i_fu_681_p2 <= (signbit_reg_2074 and newsignbit_fu_618_p3);
    brmerge4_fu_1674_p2 <= (tmp8_fu_1669_p2 or brmerge121_demorgan_s_reg_2372);
    brmerge5_fu_1801_p2 <= (p_Result_27_not_fu_1795_p2 or newsignbit_2_fu_1769_p3);
    brmerge6_fu_1959_p2 <= (underflow_6_not_fu_1953_p2 or overflow_2_fu_1917_p2);
    brmerge_i1_fu_1905_p2 <= (p_not_i_fu_1899_p2 or newsignbit_3_fu_1881_p3);
    brmerge_i_i1_fu_669_p2 <= (p_not_i_i_fu_663_p2 or newsignbit_fu_618_p3);
    brmerge_i_i2_fu_1626_p2 <= (newsignbit_1_fu_1413_p3 or deleted_zeros_0_not_s_fu_1621_p2);
    brmerge_i_i3_fu_1789_p2 <= (newsignbit_2_fu_1769_p3 xor isneg_1_fu_1755_p3);
    brmerge_i_i_fu_1947_p2 <= (underflow_3_fu_1941_p2 or overflow_2_fu_1917_p2);
    brmerge_i_i_i1_fu_1659_p2 <= (underflow_1_fu_1654_p2 or overflow_1_reg_2366);
    brmerge_i_i_i_fu_697_p2 <= (underflow_fu_692_p2 or overflow_fu_675_p2);
    carry_1_i_i_fu_1407_p2 <= (tmp4_fu_1401_p2 and sel_tmp9_fu_1378_p2);
    carry_1_not_i_i_fu_1525_p2 <= (tmp_70_reg_2275 or tmp6_fu_1520_p2);
    carry_fu_632_p2 <= (tmp_80_reg_2088 and tmp_21_fu_626_p2);

    condensed_10_out_V_address0_assign_proc : process(tmp_reg_2003, ap_CS_fsm_state11, condensed_10_out_V_a_1_reg_2064, ap_CS_fsm_state14, condensed_10_out_V_a_2_reg_2102, ap_CS_fsm_state38, ap_CS_fsm_state39, tmp_4_fu_1843_p1, ap_CS_fsm_state6, ap_CS_fsm_state13, tmp_7_fu_552_p1, tmp_s_fu_752_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            condensed_10_out_V_address0 <= tmp_4_fu_1843_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            condensed_10_out_V_address0 <= condensed_10_out_V_a_2_reg_2102;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            condensed_10_out_V_address0 <= tmp_s_fu_752_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            condensed_10_out_V_address0 <= condensed_10_out_V_a_1_reg_2064;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            condensed_10_out_V_address0 <= tmp_7_fu_552_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            condensed_10_out_V_address0 <= tmp_reg_2003(4 - 1 downto 0);
        else 
            condensed_10_out_V_address0 <= "XXXX";
        end if; 
    end process;


    condensed_10_out_V_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state6, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            condensed_10_out_V_ce0 <= ap_const_logic_1;
        else 
            condensed_10_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    condensed_10_out_V_d0_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state6, ap_CS_fsm_state13, p_Val2_2_cast_fu_465_p1, this_assign_5_1_fu_731_p3, p_Val2_16_fu_1732_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            condensed_10_out_V_d0 <= p_Val2_16_fu_1732_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            condensed_10_out_V_d0 <= this_assign_5_1_fu_731_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            condensed_10_out_V_d0 <= p_Val2_2_cast_fu_465_p1;
        else 
            condensed_10_out_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    condensed_10_out_V_we0_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state6, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            condensed_10_out_V_we0 <= ap_const_logic_1;
        else 
            condensed_10_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    condensed_64_out_address0_assign_proc : process(ap_CS_fsm_state7, grp_densifyto64_fu_399_out_V_address0, ap_CS_fsm_state4, tmp_8_fu_482_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            condensed_64_out_address0 <= tmp_8_fu_482_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            condensed_64_out_address0 <= grp_densifyto64_fu_399_out_V_address0;
        else 
            condensed_64_out_address0 <= "XXXXXX";
        end if; 
    end process;


    condensed_64_out_ce0_assign_proc : process(ap_CS_fsm_state7, grp_densifyto64_fu_399_out_V_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            condensed_64_out_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            condensed_64_out_ce0 <= grp_densifyto64_fu_399_out_V_ce0;
        else 
            condensed_64_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    condensed_64_out_we0_assign_proc : process(grp_densifyto64_fu_399_out_V_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            condensed_64_out_we0 <= grp_densifyto64_fu_399_out_V_we0;
        else 
            condensed_64_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    deleted_ones_0_i_i_fu_1586_p2 <= (sel_tmp14_fu_1581_p2 or deleted_ones_fu_1561_p3);
    deleted_ones_fu_1561_p3 <= 
        Range1_all_ones_2_mu_fu_1542_p2 when (brmerge123_i_i_fu_1536_p2(0) = '1') else 
        p_120_i_i_fu_1555_p2;
    deleted_zeros_0_not_s_fu_1621_p2 <= (tmp_43_reg_2299 and deleted_zeros_1_not_fu_1615_p2);
    deleted_zeros_1_fu_1506_p3 <= 
        Range1_all_ones_2_i_s_fu_1483_p3 when (carry_1_i_i_fu_1407_p2(0) = '1') else 
        Range1_all_zeros_2_i_fu_1498_p3;
    deleted_zeros_1_not_fu_1615_p2 <= (deleted_zeros_1_fu_1506_p3 xor ap_const_lv1_1);
    deleted_zeros_fu_648_p2 <= (signbit_reg_2074 xor not_carry_fu_642_p2);
    exitcond1_fu_420_p2 <= "1" when (j_reg_318 = ap_const_lv4_A) else "0";
    exitcond2_fu_470_p2 <= "1" when (i_reg_329 = ap_const_lv7_40) else "0";
    exitcond3_fu_740_p2 <= "1" when (i4_reg_365 = ap_const_lv4_A) else "0";
    exitcond4_fu_521_p2 <= "1" when (j3_reg_341 = ap_const_lv4_A) else "0";
    exitcond_fu_1831_p2 <= "1" when (i5_reg_376 = ap_const_lv4_A) else "0";
    exp_V_fu_1074_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_20_reg_2204));
    f_fu_959_p1 <= p_Result_5_fu_948_p5;
    grp_convolve_fu_387_ap_start <= grp_convolve_fu_387_ap_start_reg;
    grp_densifyto64_fu_399_ap_start <= grp_densifyto64_fu_399_ap_start_reg;

    grp_fu_1856_ap_start_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_1856_ap_start <= ap_const_logic_1;
        else 
            grp_fu_1856_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1856_p0 <= (condensed_10_out_V_q0 & ap_const_lv7_0);
    grp_fu_1856_p1 <= tmp_26_tr_cast_reg_2107(12 - 1 downto 0);
    i_1_fu_476_p2 <= std_logic_vector(unsigned(i_reg_329) + unsigned(ap_const_lv7_1));
    i_2_fu_1837_p2 <= std_logic_vector(unsigned(i5_reg_376) + unsigned(ap_const_lv4_1));
    i_3_fu_746_p2 <= std_logic_vector(unsigned(i4_reg_365) + unsigned(ap_const_lv4_1));
    icmp_fu_853_p2 <= "1" when (tmp_29_fu_843_p4 = ap_const_lv26_0) else "0";
    index_fu_542_p2 <= std_logic_vector(unsigned(p_shl_cast_reg_2026) + unsigned(tmp69_cast_fu_538_p1));
    ireg_V_fu_970_p1 <= d_assign_fu_412_p1;
    isneg_1_fu_1755_p3 <= p_Val2_18_fu_1749_p2(12 downto 12);
    isneg_2_fu_1861_p3 <= grp_fu_1856_p2(18 downto 18);
    j3_cast_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_reg_341),8));
    j_1_fu_426_p2 <= std_logic_vector(unsigned(j_reg_318) + unsigned(ap_const_lv4_1));
    j_2_fu_527_p2 <= std_logic_vector(unsigned(j3_reg_341) + unsigned(ap_const_lv4_1));
    lD_fu_1262_p1 <= tmp_46_fu_1256_p2(1 - 1 downto 0);
    man_V_1_fu_1020_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_6_fu_1016_p1));

    max_pooled_out_V_address0_assign_proc : process(grp_convolve_fu_387_outpool_V_address0, grp_densifyto64_fu_399_in_V_address0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pooled_out_V_address0 <= grp_densifyto64_fu_399_in_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pooled_out_V_address0 <= grp_convolve_fu_387_outpool_V_address0;
        else 
            max_pooled_out_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    max_pooled_out_V_ce0_assign_proc : process(grp_convolve_fu_387_outpool_V_ce0, grp_densifyto64_fu_399_in_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pooled_out_V_ce0 <= grp_densifyto64_fu_399_in_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pooled_out_V_ce0 <= grp_convolve_fu_387_outpool_V_ce0;
        else 
            max_pooled_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pooled_out_V_we0_assign_proc : process(grp_convolve_fu_387_outpool_V_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            max_pooled_out_V_we0 <= grp_convolve_fu_387_outpool_V_we0;
        else 
            max_pooled_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    msb_idx_1_cast_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(msb_idx_1_fu_833_p3),32));
    msb_idx_1_fu_833_p3 <= 
        ap_const_lv31_0 when (tmp_19_reg_2141(0) = '1') else 
        tmp_15_reg_2136;
    msb_idx_fu_811_p2 <= std_logic_vector(unsigned(ap_const_lv32_B) - unsigned(num_zeros_fu_803_p3));
    neg_src_0_i_i_fu_1607_p3 <= 
        tmp_51_fu_1575_p2 when (sel_tmp16_fu_1603_p2(0) = '1') else 
        sel_tmp15_fu_1598_p2;
    neg_src_0_i_i_not_fu_1664_p2 <= (neg_src_0_i_i_reg_2360 xor ap_const_lv1_1);
    newsignbit_0_not_i_fu_1923_p2 <= (newsignbit_3_fu_1881_p3 xor ap_const_lv1_1);
    newsignbit_1_fu_1413_p3 <= p_Val2_15_fu_1390_p3(11 downto 11);
    newsignbit_2_fu_1769_p3 <= p_Val2_19_fu_1763_p2(11 downto 11);
    newsignbit_3_fu_1881_p3 <= grp_fu_1856_p2(7 downto 7);
    newsignbit_fu_618_p3 <= p_Val2_8_fu_613_p2(11 downto 11);
    not_carry_fu_642_p2 <= (p_Result_4_not_fu_637_p2 or newsignbit_fu_618_p3);
    
    num_zeros_fu_803_p3_proc : process(p_Result_4_fu_795_p3)
    begin
        num_zeros_fu_803_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_4_fu_795_p3(i) = '1' then
                num_zeros_fu_803_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    or_cond115_i_i_fu_1426_p2 <= (tmp_47_reg_2325 and rev1_fu_1421_p2);
    or_cond117_i_i_fu_1449_p2 <= (tmp_47_reg_2325 and rev_reg_2306);
    overflow_1_fu_1637_p2 <= (tmp_52_fu_1632_p2 and brmerge_i_i2_fu_1626_p2);
    overflow_2_fu_1917_p2 <= (tmp_23_fu_1911_p2 and brmerge_i1_fu_1905_p2);
    overflow_fu_675_p2 <= (tmp_31_fu_653_p2 and brmerge_i_i1_fu_669_p2);
    p_119_i_i_fu_1474_p2 <= (rev_reg_2306 or Range1_all_zeros_1_reg_2342);
    p_120_i_i_fu_1555_p2 <= (tmp_75_fu_1548_p3 or Range1_all_zeros_fu_1463_p2);
    p_122_i_i_fu_1468_p2 <= (tmp_49_fu_1458_p2 and Range1_all_zeros_fu_1463_p2);
    p_38_i_i_fu_658_p2 <= (signbit_reg_2074 and carry_fu_632_p2);
    p_Repl2_1_trunc_fu_936_p2 <= std_logic_vector(unsigned(tmp7280_cast_fu_932_p1) + unsigned(tmp_53_reg_2146));
    p_Result_27_not_fu_1795_p2 <= (isneg_1_fu_1755_p3 xor ap_const_lv1_1);
    
    p_Result_3_fu_785_p4_proc : process(p_Val2_7_fu_779_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(12+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(12+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(12 - 1 downto 0);
    variable p_Result_3_fu_785_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(12 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(12 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(12 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_B(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := p_Val2_7_fu_779_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(12-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(12-1-unsigned(ap_const_lv32_B(4-1 downto 0)));
            for p_Result_3_fu_785_p4_i in 0 to 12-1 loop
                v0_cpy(p_Result_3_fu_785_p4_i) := p_Val2_7_fu_779_p3(12-1-p_Result_3_fu_785_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(12-1 downto 0)))));
        res_mask := res_mask(12-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_3_fu_785_p4 <= resvalue(12-1 downto 0);
    end process;

    p_Result_4_fu_795_p3 <= (ap_const_lv20_FFFFF & p_Result_3_fu_785_p4);
    p_Result_4_not_fu_637_p2 <= (tmp_80_reg_2088 xor ap_const_lv1_1);
    p_Result_5_fu_948_p5 <= (tmp_18_fu_941_p3 & tmp32_V_6_reg_2156(22 downto 0));
    p_Result_6_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_1009_p3),54));
    p_Result_8_fu_909_p4 <= tmp32_V_6_fu_905_p1(30 downto 23);
    p_Result_s_fu_888_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_7_reg_2130),to_integer(unsigned('0' & tmp_45_fu_884_p1(12-1 downto 0)))));
    p_Val2_11_mux_fu_1965_p3 <= 
        ap_const_lv9_FF when (brmerge_i_i_fu_1947_p2(0) = '1') else 
        p_Val2_9_fu_1873_p3;
    p_Val2_12_fu_1127_p3 <= 
        tmp_66_fu_1116_p1 when (tmp_28_fu_1096_p2(0) = '1') else 
        storemerge_fu_1120_p3;
    p_Val2_14_fu_1170_p2 <= std_logic_vector(unsigned(p_Val2_12_fu_1127_p3) + unsigned(tmp_40_fu_1166_p1));
    p_Val2_15_fu_1390_p3 <= 
        tmp_67_fu_1340_p1 when (sel_tmp8_reg_2281(0) = '1') else 
        sel_tmp1_fu_1383_p3;
    p_Val2_16_fu_1732_p3 <= 
        p_Val2_21_mux_fu_1679_p3 when (sel_tmp20_fu_1727_p2(0) = '1') else 
        sel_tmp18_fu_1709_p3;
    p_Val2_18_fu_1749_p2 <= std_logic_vector(signed(tmp_55_fu_1741_p1) + signed(tmp_56_fu_1745_p1));
    p_Val2_19_fu_1763_p2 <= std_logic_vector(signed(p_Val2_16_fu_1732_p3) + signed(p_Val2_17_reg_353));
    p_Val2_1_33_fu_1686_p3 <= 
        ap_const_lv12_0 when (tmp_24_reg_2196(0) = '1') else 
        ap_const_lv12_800;
        p_Val2_1_cast_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_437_p4),7));

    p_Val2_1_fu_459_p2 <= std_logic_vector(signed(p_Val2_1_cast_cast_fu_447_p1) + signed(tmp_6_cast_cast_fu_455_p1));
    p_Val2_21_mux_fu_1679_p3 <= 
        ap_const_lv12_7FF when (brmerge_i_i_i1_fu_1659_p2(0) = '1') else 
        p_Val2_15_reg_2353;
    p_Val2_22_fu_1079_p3 <= 
        man_V_1_reg_2214 when (isneg_reg_2176(0) = '1') else 
        p_Result_6_reg_2209;
    p_Val2_25_mux_fu_1807_p3 <= 
        ap_const_lv12_7FF when (brmerge_i_i3_fu_1789_p2(0) = '1') else 
        p_Val2_19_fu_1763_p2;
    p_Val2_2_34_fu_1815_p3 <= 
        ap_const_lv12_800 when (underflow_2_fu_1783_p2(0) = '1') else 
        p_Val2_19_fu_1763_p2;
        p_Val2_2_cast_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_fu_459_p2),12));

    p_Val2_4_fu_1989_p1 <= OP1_V_reg_2036(12 - 1 downto 0);
    p_Val2_5_fu_579_p2 <= std_logic_vector(signed(p_Val2_4_reg_2059) + signed(tmp_12_cast_fu_575_p1));
    p_Val2_7_fu_779_p3 <= 
        tmp_6_fu_774_p2 when (is_neg_reg_2119(0) = '1') else 
        p_Val2_2_reg_2112;
    p_Val2_8_31_fu_723_p3 <= 
        ap_const_lv12_800 when (underflow_fu_692_p2(0) = '1') else 
        p_Val2_8_fu_613_p2;
    p_Val2_8_fu_613_p2 <= std_logic_vector(unsigned(tmp_16_fu_610_p1) + unsigned(p_Val2_6_reg_2083));
    p_Val2_8_mux_fu_715_p3 <= 
        ap_const_lv12_7FF when (brmerge_i_i_i_fu_697_p2(0) = '1') else 
        p_Val2_8_fu_613_p2;
    p_Val2_9_fu_1873_p3 <= (tmp_83_fu_1869_p1 & ap_const_lv1_0);
    p_Val2_s_36_fu_1973_p3 <= 
        ap_const_lv9_100 when (underflow_3_fu_1941_p2(0) = '1') else 
        p_Val2_9_fu_1873_p3;
    p_not38_i_fu_1929_p2 <= "0" when (tmp_58_fu_1889_p4 = ap_const_lv11_7FF) else "1";
    p_not_i_fu_1899_p2 <= "0" when (tmp_58_fu_1889_p4 = ap_const_lv11_0) else "1";
    p_not_i_i_fu_663_p2 <= (deleted_zeros_fu_648_p2 xor ap_const_lv1_1);
    p_shl3_cast_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_503_p2),8));
    p_shl_cast_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_491_p3),10));
    p_shl_fu_491_p3 <= (tmp_5_fu_487_p1 & ap_const_lv3_0);
    p_x_assign_fu_963_p3 <= 
        ap_const_lv32_0 when (tmp_3_reg_2125(0) = '1') else 
        f_fu_959_p1;
        pos1_cast_fu_1219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pos1_fu_1214_p2),32));

    pos1_fu_1214_p2 <= std_logic_vector(unsigned(ap_const_lv12_5) + unsigned(F2_reg_2219));
        pos2_cast_fu_1228_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(pos2_fu_1223_p2),32));

    pos2_fu_1223_p2 <= std_logic_vector(unsigned(ap_const_lv12_6) + unsigned(F2_reg_2219));
    qb_fu_1152_p3 <= 
        isneg_reg_2176 when (tmp_37_reg_2241(0) = '1') else 
        tmp_68_fu_1144_p3;
    r_V_fu_1431_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv54_3FFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_48_reg_2331(31-1 downto 0)))));
    rev1_fu_1421_p2 <= (tmp_74_reg_2320 xor ap_const_lv1_1);
    rev_fu_1246_p2 <= (tmp_72_fu_1238_p3 xor ap_const_lv1_1);
    sel_tmp10_fu_1320_p2 <= (tmp_72_fu_1238_p3 or tmp_49_not_fu_1314_p2);
    sel_tmp11_fu_1326_p2 <= (tmp_50_fu_1302_p2 and sel_tmp10_fu_1320_p2);
    sel_tmp12_fu_1478_p3 <= 
        Range1_all_ones_1_reg_2313 when (sel_tmp11_reg_2347(0) = '1') else 
        rev_reg_2306;
    sel_tmp13_fu_1491_p3 <= 
        Range1_all_zeros_fu_1463_p2 when (sel_tmp11_reg_2347(0) = '1') else 
        p_119_i_i_fu_1474_p2;
    sel_tmp14_fu_1581_p2 <= (tmp_43_reg_2299 xor ap_const_lv1_1);
    sel_tmp15_fu_1598_p2 <= (tmp7_fu_1592_p2 and isneg_reg_2176);
    sel_tmp16_fu_1603_p2 <= (tmp_43_reg_2299 and isneg_reg_2176);
    sel_tmp17_fu_1698_p3 <= 
        p_Val2_1_33_fu_1686_p3 when (tmp_54_fu_1693_p2(0) = '1') else 
        p_Val2_15_reg_2353;
    sel_tmp18_fu_1709_p3 <= 
        sel_tmp17_fu_1698_p3 when (sel_tmp58_demorgan_fu_1705_p2(0) = '1') else 
        p_Val2_15_reg_2353;
    sel_tmp19_fu_1716_p2 <= (tmp_24_reg_2196 xor ap_const_lv1_1);
    sel_tmp1_fu_1383_p3 <= 
        p_Val2_14_reg_2269 when (sel_tmp9_fu_1378_p2(0) = '1') else 
        sel_tmp6_fu_1371_p3;
    sel_tmp20_fu_1727_p2 <= (tmp_42_reg_2288 and tmp9_fu_1721_p2);
    sel_tmp24_not_fu_1514_p2 <= (sel_tmp9_fu_1378_p2 xor ap_const_lv1_1);
    sel_tmp2_fu_1350_p2 <= (tmp_27_reg_2251 xor ap_const_lv1_1);
    sel_tmp3_fu_1355_p2 <= (sel_tmp2_fu_1350_p2 and QUAN_INC_reg_2228);
    sel_tmp4_fu_1360_p2 <= (tmp_69_reg_2263 xor ap_const_lv1_1);
    sel_tmp58_demorgan_fu_1705_p2 <= (tmp_42_reg_2288 or tmp_24_reg_2196);
    sel_tmp5_fu_1365_p2 <= (sel_tmp4_fu_1360_p2 and sel_tmp3_fu_1355_p2);
    sel_tmp6_fu_1371_p3 <= 
        p_Val2_14_reg_2269 when (sel_tmp5_fu_1365_p2(0) = '1') else 
        sel_tmp_fu_1344_p3;
    sel_tmp7_fu_1184_p2 <= "1" when (signed(F2_reg_2219) < signed(ap_const_lv12_7)) else "0";
    sel_tmp8_fu_1189_p2 <= (tmp_30_fu_1101_p2 and sel_tmp7_fu_1184_p2);
    sel_tmp9_fu_1378_p2 <= (tmp_69_reg_2263 and sel_tmp3_fu_1355_p2);
    sel_tmp_fu_1344_p3 <= 
        tmp_65_reg_2257 when (tmp_27_reg_2251(0) = '1') else 
        ap_const_lv12_0;
        sh_amt_cast_fu_1084_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_2234),32));

    sh_amt_fu_1060_p3 <= 
        tmp_25_fu_1048_p2 when (QUAN_INC_fu_1042_p2(0) = '1') else 
        tmp_26_fu_1054_p2;
    softmax_out_V_address0 <= tmp_4_reg_2391(4 - 1 downto 0);

    softmax_out_V_ce0_assign_proc : process(ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            softmax_out_V_ce0 <= ap_const_logic_1;
        else 
            softmax_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    softmax_out_V_we0_assign_proc : process(ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            softmax_out_V_we0 <= ap_const_logic_1;
        else 
            softmax_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    storemerge_fu_1120_p3 <= 
        ap_const_lv12_FFF when (isneg_reg_2176(0) = '1') else 
        ap_const_lv12_0;
    sum_V_fu_1823_p3 <= 
        p_Val2_25_mux_fu_1807_p3 when (brmerge5_fu_1801_p2(0) = '1') else 
        p_Val2_2_34_fu_1815_p3;
    this_assign_5_1_fu_731_p3 <= 
        p_Val2_8_mux_fu_715_p3 when (underflow_not_fu_709_p2(0) = '1') else 
        p_Val2_8_31_fu_723_p3;
    this_assign_7_1_fu_1981_p3 <= 
        p_Val2_11_mux_fu_1965_p3 when (brmerge6_fu_1959_p2(0) = '1') else 
        p_Val2_s_36_fu_1973_p3;
    tmp10_fu_533_p2 <= std_logic_vector(unsigned(j3_cast_fu_517_p1) + unsigned(p_shl3_cast_reg_2031));
    tmp11_fu_703_p2 <= (tmp_31_fu_653_p2 or newsignbit_fu_618_p3);
    tmp32_V_1_fu_868_p2 <= std_logic_vector(shift_left(unsigned(tmp32_V_fu_859_p1),to_integer(unsigned('0' & tmp_11_fu_862_p2(31-1 downto 0)))));
    tmp32_V_2_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_888_p2),32));
    tmp32_V_3_fu_897_p3 <= 
        tmp32_V_1_fu_868_p2 when (icmp_fu_853_p2(0) = '1') else 
        tmp32_V_2_fu_893_p1;
    tmp32_V_6_fu_905_p1 <= grp_fu_409_p1;
    tmp32_V_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_7_reg_2130),32));
    tmp3_fu_925_p3 <= (ap_const_lv6_3C & tmp_13_reg_2161);
    tmp4_fu_1401_p2 <= (tmp73_demorgan_fu_1397_p2 xor ap_const_lv1_1);
    tmp5_fu_1266_p2 <= (rev_fu_1246_p2 and lD_fu_1262_p1);
    tmp69_cast_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp10_fu_533_p2),10));
    tmp6_fu_1520_p2 <= (sel_tmp8_reg_2281 or sel_tmp24_not_fu_1514_p2);
    tmp70_demorgan_fu_686_p2 <= (p_38_i_i_fu_658_p2 or brmerge40_demorgan_i_fu_681_p2);
    tmp7280_cast_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_925_p3),8));
    tmp73_demorgan_fu_1397_p2 <= (tmp_70_reg_2275 or sel_tmp8_reg_2281);
    tmp74_cast_cast_fu_1195_p3 <= 
        ap_const_lv12_2 when (QUAN_INC_reg_2228(0) = '1') else 
        ap_const_lv12_1;
    tmp7_fu_1592_p2 <= (sel_tmp14_fu_1581_p2 and newsignbit_1_fu_1413_p3);
    tmp8_fu_1669_p2 <= (overflow_1_reg_2366 or neg_src_0_i_i_not_fu_1664_p2);
    tmp9_fu_1721_p2 <= (sel_tmp19_fu_1716_p2 and brmerge4_fu_1674_p2);
    tmp_10_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_542_p2),64));
    tmp_11_fu_862_p2 <= std_logic_vector(unsigned(ap_const_lv32_1F) - unsigned(msb_idx_1_cast_fu_839_p1));
        tmp_12_cast_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_567_p3),21));

    tmp_12_fu_567_p3 <= (condensed_10_out_V_q0 & ap_const_lv8_0);
    tmp_13_fu_919_p2 <= "0" when (p_Result_8_fu_909_p4 = ap_const_lv8_9E) else "1";
    tmp_15_fu_817_p1 <= msb_idx_fu_811_p2(31 - 1 downto 0);
    tmp_16_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_79_reg_2069),12));
    tmp_18_fu_941_p3 <= (is_neg_reg_2119 & p_Repl2_1_trunc_fu_936_p2);
    tmp_1_fu_437_p4 <= biases_dense10_V_q0(6 downto 1);
    tmp_20_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_reg_2186),12));
    tmp_21_fu_626_p2 <= (newsignbit_fu_618_p3 xor ap_const_lv1_1);
    tmp_22_fu_1009_p3 <= (ap_const_lv1_1 & tmp_63_reg_2191);
    tmp_23_fu_1911_p2 <= (isneg_2_fu_1861_p3 xor ap_const_lv1_1);
    tmp_24_fu_1000_p2 <= "1" when (tmp_60_fu_974_p1 = ap_const_lv63_0) else "0";
    tmp_25_fu_1048_p2 <= std_logic_vector(signed(ap_const_lv12_FF9) + signed(F2_fu_1026_p2));
    tmp_26_fu_1054_p2 <= std_logic_vector(unsigned(ap_const_lv12_7) - unsigned(F2_fu_1026_p2));
        tmp_26_tr_cast_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_17_reg_353),19));

    tmp_27_fu_1087_p2 <= "1" when (F2_reg_2219 = ap_const_lv12_7) else "0";
    tmp_28_fu_1096_p2 <= "1" when (unsigned(sh_amt_reg_2234) < unsigned(ap_const_lv12_36)) else "0";
    tmp_29_fu_843_p4 <= msb_idx_1_fu_833_p3(30 downto 5);
    tmp_2_fu_451_p1 <= biases_dense10_V_q0(1 - 1 downto 0);
    tmp_30_fu_1101_p2 <= "1" when (unsigned(sh_amt_reg_2234) < unsigned(ap_const_lv12_C)) else "0";
    tmp_31_fu_653_p2 <= (signbit_reg_2074 xor ap_const_lv1_1);
    tmp_32_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_amt_cast_fu_1084_p1),54));
    tmp_33_fu_1110_p2 <= std_logic_vector(shift_right(signed(p_Val2_22_fu_1079_p3),to_integer(unsigned('0' & tmp_32_fu_1106_p1(31-1 downto 0)))));
        tmp_34_fu_1332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_65_reg_2257),32));

    tmp_35_fu_874_p1 <= msb_idx_1_fu_833_p3(4 - 1 downto 0);
    tmp_36_fu_1335_p2 <= std_logic_vector(shift_left(unsigned(tmp_34_fu_1332_p1),to_integer(unsigned('0' & sh_amt_cast_reg_2246(31-1 downto 0)))));
    tmp_37_fu_1068_p2 <= "1" when (signed(tmp_25_fu_1048_p2) > signed(ap_const_lv12_36)) else "0";
    tmp_38_fu_878_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(tmp_35_fu_874_p1));
    tmp_39_fu_1135_p2 <= std_logic_vector(signed(ap_const_lv12_FF8) + signed(F2_reg_2219));
    tmp_3_fu_769_p2 <= "1" when (p_Val2_2_reg_2112 = ap_const_lv12_0) else "0";
    tmp_40_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_fu_1152_p3),12));
    tmp_41_fu_1202_p2 <= std_logic_vector(unsigned(tmp74_cast_cast_fu_1195_p3) + unsigned(exp_V_fu_1074_p2));
    tmp_42_fu_1208_p2 <= "1" when (signed(tmp_41_fu_1202_p2) > signed(ap_const_lv12_4)) else "0";
    tmp_43_fu_1232_p2 <= "1" when (signed(pos1_fu_1214_p2) < signed(ap_const_lv12_36)) else "0";
    tmp_44_fu_1252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos1_cast_fu_1219_p1),54));
    tmp_45_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_878_p2),12));
    tmp_46_fu_1256_p2 <= std_logic_vector(shift_right(signed(p_Val2_22_fu_1079_p3),to_integer(unsigned('0' & tmp_44_fu_1252_p1(31-1 downto 0)))));
    tmp_47_fu_1286_p2 <= "1" when (signed(pos2_fu_1223_p2) < signed(ap_const_lv12_36)) else "0";
    tmp_48_fu_1292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pos2_cast_fu_1228_p1),54));
    tmp_49_fu_1458_p2 <= "1" when (Range2_V_1_reg_2336 = ap_const_lv54_0) else "0";
    tmp_49_not_fu_1314_p2 <= (tmp_47_fu_1286_p2 xor ap_const_lv1_1);
    tmp_4_fu_1843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i5_reg_376),64));
    tmp_50_fu_1302_p2 <= "1" when (pos2_fu_1223_p2 = ap_const_lv12_36) else "0";
    tmp_51_fu_1575_p2 <= (ap_const_lv1_1 xor Range1_all_ones_2_i_fu_1569_p2);
    tmp_52_fu_1632_p2 <= (isneg_reg_2176 xor ap_const_lv1_1);
        tmp_53_cast_fu_1140_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_39_fu_1135_p2),32));

    tmp_53_fu_829_p1 <= msb_idx_fu_811_p2(8 - 1 downto 0);
    tmp_54_fu_1693_p2 <= (underflow_1_fu_1654_p2 or tmp_24_reg_2196);
        tmp_55_fu_1741_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_17_reg_353),13));

        tmp_56_fu_1745_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_16_fu_1732_p3),13));

    tmp_57_fu_1777_p2 <= (newsignbit_2_fu_1769_p3 xor ap_const_lv1_1);
    tmp_58_fu_1889_p4 <= grp_fu_1856_p2(18 downto 8);
    tmp_5_fu_487_p1 <= i_reg_329(6 - 1 downto 0);
    tmp_60_fu_974_p1 <= ireg_V_fu_970_p1(63 - 1 downto 0);
    tmp_63_fu_996_p1 <= ireg_V_fu_970_p1(52 - 1 downto 0);
    tmp_64_fu_1032_p4 <= F2_fu_1026_p2(11 downto 3);
    tmp_65_fu_1092_p1 <= p_Val2_22_fu_1079_p3(12 - 1 downto 0);
    tmp_66_fu_1116_p1 <= tmp_33_fu_1110_p2(12 - 1 downto 0);
    tmp_67_fu_1340_p1 <= tmp_36_fu_1335_p2(12 - 1 downto 0);
    tmp_68_fu_1144_p3 <= p_Val2_22_fu_1079_p3(to_integer(unsigned(tmp_53_cast_fu_1140_p1)) downto to_integer(unsigned(tmp_53_cast_fu_1140_p1))) when (to_integer(unsigned(tmp_53_cast_fu_1140_p1))>= 0 and to_integer(unsigned(tmp_53_cast_fu_1140_p1))<=53) else "-";
    tmp_6_cast_cast_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_451_p1),7));
    tmp_6_fu_774_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(p_Val2_2_reg_2112));
    tmp_72_fu_1238_p3 <= pos1_fu_1214_p2(11 downto 11);
    tmp_75_fu_1548_p3 <= pos1_reg_2294(11 downto 11);
    tmp_7_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_reg_341),64));
    tmp_83_fu_1869_p1 <= grp_fu_1856_p2(8 - 1 downto 0);
    tmp_8_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_329),64));
    tmp_9_fu_503_p2 <= std_logic_vector(shift_left(unsigned(i_reg_329),to_integer(unsigned('0' & ap_const_lv7_1(7-1 downto 0)))));
    tmp_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_318),64));
    tmp_s_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i4_reg_365),64));
    underflow_1_fu_1654_p2 <= (neg_src_0_i_i_reg_2360 and brmerge121_i_i_fu_1649_p2);
    underflow_2_fu_1783_p2 <= (tmp_57_fu_1777_p2 and isneg_1_fu_1755_p3);
    underflow_3_fu_1941_p2 <= (isneg_2_fu_1861_p3 and brmerge39_i_fu_1935_p2);
    underflow_6_not_fu_1953_p2 <= (underflow_3_fu_1941_p2 xor ap_const_lv1_1);
    underflow_fu_692_p2 <= (tmp70_demorgan_fu_686_p2 xor signbit_reg_2074);
    underflow_not_fu_709_p2 <= (tmp11_fu_703_p2 or p_38_i_i_fu_658_p2);
    weights_dense10_V_address0 <= tmp_10_fu_547_p1(10 - 1 downto 0);

    weights_dense10_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            weights_dense10_V_ce0 <= ap_const_logic_1;
        else 
            weights_dense10_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
