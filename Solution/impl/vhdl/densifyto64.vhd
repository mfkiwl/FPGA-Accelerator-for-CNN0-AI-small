-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity densifyto64 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    in_V_ce0 : OUT STD_LOGIC;
    in_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    out_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_V_ce0 : OUT STD_LOGIC;
    out_V_we0 : OUT STD_LOGIC;
    out_V_d0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    out_V_q0 : IN STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of densifyto64 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv9_157 : STD_LOGIC_VECTOR (8 downto 0) := "101010111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv12_7FF : STD_LOGIC_VECTOR (11 downto 0) := "011111111111";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal biases_dense64_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal biases_dense64_V_ce0 : STD_LOGIC;
    signal biases_dense64_V_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal weights_dense64_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal weights_dense64_V_ce0 : STD_LOGIC;
    signal weights_dense64_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_3_fu_185_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_3_reg_504 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_509 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond5_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_235_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_4_reg_522 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond6_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_246_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_59_reg_532 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal OP1_V_fu_254_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal OP1_V_reg_537 : STD_LOGIC_VECTOR (20 downto 0);
    signal j_4_fu_268_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_4_reg_545 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond7_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_addr_2_reg_555 : STD_LOGIC_VECTOR (5 downto 0);
    signal weights_dense64_V_lo_reg_560 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_Val2_25_fu_495_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_25_reg_565 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_88_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_reg_575 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal p_Val2_27_reg_584 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_89_reg_589 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_fu_478_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_5_reg_598 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal out_V_addr_1_reg_603 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_134 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_reg_145 : STD_LOGIC_VECTOR (8 downto 0);
    signal j1_reg_157 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i2_reg_168 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_s_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_33_cast_fu_224_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal this_assign_1_fu_463_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_61_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_fu_196_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_86_fu_210_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_32_cast_cas_fu_206_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_cast_cast_fu_214_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_23_fu_218_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j1_cast5_fu_258_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_63_fu_279_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_65_fu_299_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_89_cast_fu_307_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Val2_26_fu_311_p2 : STD_LOGIC_VECTOR (20 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of p_Val2_26_fu_311_p2 : signal is "no";
    signal tmp_66_fu_342_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_28_fu_345_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal newsignbit_fu_350_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_16_not_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_carry_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_i_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge40_demorgan_i_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_demorgan_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_i_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_not_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_33_mux_fu_447_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_s_39_fu_455_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_25_fu_495_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component dev_digits_classihbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component densifyto64_biasefYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component densifyto64_weighg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;



begin
    biases_dense64_V_U : component densifyto64_biasefYi
    generic map (
        DataWidth => 7,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => biases_dense64_V_address0,
        ce0 => biases_dense64_V_ce0,
        q0 => biases_dense64_V_q0);

    weights_dense64_V_U : component densifyto64_weighg8j
    generic map (
        DataWidth => 9,
        AddressRange => 21952,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_dense64_V_address0,
        ce0 => weights_dense64_V_ce0,
        q0 => weights_dense64_V_q0);

    dev_digits_classihbi_U10 : component dev_digits_classihbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 12,
        dout_WIDTH => 21)
    port map (
        din0 => weights_dense64_V_lo_reg_560,
        din1 => p_Val2_25_fu_495_p1,
        dout => p_Val2_25_fu_495_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i2_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i2_reg_168 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i2_reg_168 <= i_5_reg_598;
            end if; 
        end if;
    end process;

    i_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_145 <= ap_const_lv9_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond7_fu_262_p2 = ap_const_lv1_1))) then 
                i_reg_145 <= i_4_reg_522;
            end if; 
        end if;
    end process;

    j1_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j1_reg_157 <= j_4_reg_545;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j1_reg_157 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    j_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_reg_134 <= j_3_reg_504;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_134 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                OP1_V_reg_537 <= OP1_V_fu_254_p1;
                    tmp_59_reg_532(14 downto 6) <= tmp_59_fu_246_p3(14 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_4_reg_522 <= i_4_fu_235_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_5_reg_598 <= i_5_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_3_reg_504 <= j_3_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_4_reg_545 <= j_4_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_472_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                out_V_addr_1_reg_603 <= tmp_60_fu_484_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_262_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                out_V_addr_2_reg_555 <= tmp_62_fu_274_p1(6 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                p_Val2_25_reg_565 <= p_Val2_25_fu_495_p2;
                tmp_88_reg_570 <= p_Val2_25_fu_495_p2(7 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_Val2_27_reg_584 <= p_Val2_26_fu_311_p2(19 downto 8);
                signbit_reg_575 <= p_Val2_26_fu_311_p2(20 downto 20);
                tmp_89_reg_589 <= p_Val2_26_fu_311_p2(19 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_reg_509(6 downto 0) <= tmp_fu_191_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                weights_dense64_V_lo_reg_560 <= weights_dense64_V_q0;
            end if;
        end if;
    end process;
    tmp_reg_509(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_59_reg_532(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond5_fu_179_p2, ap_CS_fsm_state4, exitcond6_fu_229_p2, ap_CS_fsm_state6, exitcond7_fu_262_p2, ap_CS_fsm_state11, exitcond_fu_472_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond5_fu_179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((exitcond6_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond7_fu_262_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_472_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
        OP1_V_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in_V_q0),21));

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, exitcond_fu_472_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_472_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, exitcond_fu_472_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_472_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    biases_dense64_V_address0 <= tmp_fu_191_p1(6 - 1 downto 0);

    biases_dense64_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            biases_dense64_V_ce0 <= ap_const_logic_1;
        else 
            biases_dense64_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge40_demorgan_i_fu_413_p2 <= (signbit_reg_575 and newsignbit_fu_350_p3);
    brmerge_i_i_fu_401_p2 <= (p_not_i_i_fu_395_p2 or newsignbit_fu_350_p3);
    brmerge_i_i_i_fu_429_p2 <= (underflow_fu_424_p2 or overflow_fu_407_p2);
    carry_fu_364_p2 <= (tmp_89_reg_589 and tmp_67_fu_358_p2);
    deleted_zeros_fu_380_p2 <= (signbit_reg_575 xor not_carry_fu_374_p2);
    exitcond5_fu_179_p2 <= "1" when (j_reg_134 = ap_const_lv7_40) else "0";
    exitcond6_fu_229_p2 <= "1" when (i_reg_145 = ap_const_lv9_157) else "0";
    exitcond7_fu_262_p2 <= "1" when (j1_reg_157 = ap_const_lv7_40) else "0";
    exitcond_fu_472_p2 <= "1" when (i2_reg_168 = ap_const_lv7_40) else "0";
    i_4_fu_235_p2 <= std_logic_vector(unsigned(i_reg_145) + unsigned(ap_const_lv9_1));
    i_5_fu_478_p2 <= std_logic_vector(unsigned(i2_reg_168) + unsigned(ap_const_lv7_1));
    in_V_address0 <= tmp_s_fu_241_p1(9 - 1 downto 0);

    in_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_V_ce0 <= ap_const_logic_1;
        else 
            in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j1_cast5_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_reg_157),15));
    j_3_fu_185_p2 <= std_logic_vector(unsigned(j_reg_134) + unsigned(ap_const_lv7_1));
    j_4_fu_268_p2 <= std_logic_vector(unsigned(j1_reg_157) + unsigned(ap_const_lv7_1));
    newsignbit_fu_350_p3 <= p_Val2_28_fu_345_p2(11 downto 11);
    not_carry_fu_374_p2 <= (p_Result_16_not_fu_369_p2 or newsignbit_fu_350_p3);

    out_V_address0_assign_proc : process(tmp_reg_509, out_V_addr_2_reg_555, ap_CS_fsm_state8, ap_CS_fsm_state11, out_V_addr_1_reg_603, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state12, tmp_60_fu_484_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_V_address0 <= out_V_addr_1_reg_603;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            out_V_address0 <= tmp_60_fu_484_p1(6 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            out_V_address0 <= out_V_addr_2_reg_555;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_V_address0 <= tmp_reg_509(6 - 1 downto 0);
        else 
            out_V_address0 <= "XXXXXX";
        end if; 
    end process;


    out_V_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            out_V_ce0 <= ap_const_logic_1;
        else 
            out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    out_V_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state12, p_Val2_33_cast_fu_224_p1, this_assign_1_fu_463_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            out_V_d0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            out_V_d0 <= this_assign_1_fu_463_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            out_V_d0 <= p_Val2_33_cast_fu_224_p1;
        else 
            out_V_d0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    out_V_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state10, ap_CS_fsm_state12, tmp_61_fu_489_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_61_fu_489_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            out_V_we0 <= ap_const_logic_1;
        else 
            out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_fu_407_p2 <= (tmp_68_fu_385_p2 and brmerge_i_i_fu_401_p2);
    p_38_i_i_fu_390_p2 <= (signbit_reg_575 and carry_fu_364_p2);
    p_Result_16_not_fu_369_p2 <= (tmp_89_reg_589 xor ap_const_lv1_1);
    p_Val2_23_fu_218_p2 <= std_logic_vector(signed(p_Val2_32_cast_cas_fu_206_p1) + signed(tmp_cast_cast_fu_214_p1));
    p_Val2_25_fu_495_p1 <= OP1_V_reg_537(12 - 1 downto 0);
    p_Val2_26_fu_311_p2 <= std_logic_vector(signed(p_Val2_25_reg_565) + signed(tmp_89_cast_fu_307_p1));
    p_Val2_28_fu_345_p2 <= std_logic_vector(unsigned(tmp_66_fu_342_p1) + unsigned(p_Val2_27_reg_584));
        p_Val2_32_cast_cas_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_85_fu_196_p4),7));

        p_Val2_33_cast_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_23_fu_218_p2),12));

    p_Val2_33_mux_fu_447_p3 <= 
        ap_const_lv12_7FF when (brmerge_i_i_i_fu_429_p2(0) = '1') else 
        p_Val2_28_fu_345_p2;
    p_Val2_s_39_fu_455_p3 <= 
        ap_const_lv12_800 when (underflow_fu_424_p2(0) = '1') else 
        p_Val2_28_fu_345_p2;
    p_not_i_i_fu_395_p2 <= (deleted_zeros_fu_380_p2 xor ap_const_lv1_1);
    this_assign_1_fu_463_p3 <= 
        p_Val2_33_mux_fu_447_p3 when (underflow_not_fu_441_p2(0) = '1') else 
        p_Val2_s_39_fu_455_p3;
    tmp1_demorgan_fu_418_p2 <= (p_38_i_i_fu_390_p2 or brmerge40_demorgan_i_fu_413_p2);
    tmp2_fu_435_p2 <= (tmp_68_fu_385_p2 or newsignbit_fu_350_p3);
    tmp_59_fu_246_p3 <= (i_reg_145 & ap_const_lv6_0);
    tmp_60_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_reg_168),64));
    tmp_61_fu_489_p2 <= "1" when (signed(out_V_q0) > signed(ap_const_lv12_0)) else "0";
    tmp_62_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j1_reg_157),64));
    tmp_63_fu_279_p2 <= std_logic_vector(unsigned(j1_cast5_fu_258_p1) + unsigned(tmp_59_reg_532));
    tmp_64_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_279_p2),64));
    tmp_65_fu_299_p3 <= (out_V_q0 & ap_const_lv8_0);
    tmp_66_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_88_reg_570),12));
    tmp_67_fu_358_p2 <= (newsignbit_fu_350_p3 xor ap_const_lv1_1);
    tmp_68_fu_385_p2 <= (signbit_reg_575 xor ap_const_lv1_1);
    tmp_85_fu_196_p4 <= biases_dense64_V_q0(6 downto 1);
    tmp_86_fu_210_p1 <= biases_dense64_V_q0(1 - 1 downto 0);
        tmp_89_cast_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_65_fu_299_p3),21));

    tmp_cast_cast_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_86_fu_210_p1),7));
    tmp_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_134),64));
    tmp_s_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_145),64));
    underflow_fu_424_p2 <= (tmp1_demorgan_fu_418_p2 xor signbit_reg_575);
    underflow_not_fu_441_p2 <= (tmp2_fu_435_p2 or p_38_i_i_fu_390_p2);
    weights_dense64_V_address0 <= tmp_64_fu_284_p1(15 - 1 downto 0);

    weights_dense64_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            weights_dense64_V_ce0 <= ap_const_logic_1;
        else 
            weights_dense64_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
