// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module densifyto64 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_address0,
        in_V_ce0,
        in_V_q0,
        out_V_address0,
        out_V_ce0,
        out_V_we0,
        out_V_d0,
        out_V_q0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] in_V_address0;
output   in_V_ce0;
input  [11:0] in_V_q0;
output  [5:0] out_V_address0;
output   out_V_ce0;
output   out_V_we0;
output  [11:0] out_V_d0;
input  [11:0] out_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_ce0;
reg[5:0] out_V_address0;
reg out_V_ce0;
reg out_V_we0;
reg[11:0] out_V_d0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] biases_dense64_V_address0;
reg    biases_dense64_V_ce0;
wire   [6:0] biases_dense64_V_q0;
wire   [14:0] weights_dense64_V_address0;
reg    weights_dense64_V_ce0;
wire   [8:0] weights_dense64_V_q0;
wire   [6:0] j_3_fu_185_p2;
reg   [6:0] j_3_reg_504;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_fu_191_p1;
reg   [63:0] tmp_reg_509;
wire   [0:0] exitcond5_fu_179_p2;
wire   [8:0] i_4_fu_235_p2;
reg   [8:0] i_4_reg_522;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond6_fu_229_p2;
wire   [14:0] tmp_59_fu_246_p3;
reg   [14:0] tmp_59_reg_532;
wire    ap_CS_fsm_state5;
wire  signed [20:0] OP1_V_fu_254_p1;
reg  signed [20:0] OP1_V_reg_537;
wire   [6:0] j_4_fu_268_p2;
reg   [6:0] j_4_reg_545;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond7_fu_262_p2;
reg   [5:0] out_V_addr_2_reg_555;
reg  signed [8:0] weights_dense64_V_lo_reg_560;
wire    ap_CS_fsm_state7;
wire  signed [20:0] p_Val2_25_fu_495_p2;
reg  signed [20:0] p_Val2_25_reg_565;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_88_reg_570;
reg   [0:0] signbit_reg_575;
wire    ap_CS_fsm_state9;
reg   [11:0] p_Val2_27_reg_584;
reg   [0:0] tmp_89_reg_589;
wire   [6:0] i_5_fu_478_p2;
reg   [6:0] i_5_reg_598;
wire    ap_CS_fsm_state11;
reg   [5:0] out_V_addr_1_reg_603;
wire   [0:0] exitcond_fu_472_p2;
reg   [6:0] j_reg_134;
wire    ap_CS_fsm_state3;
reg   [8:0] i_reg_145;
reg   [6:0] j1_reg_157;
wire    ap_CS_fsm_state10;
reg   [6:0] i2_reg_168;
wire    ap_CS_fsm_state12;
wire   [63:0] tmp_s_fu_241_p1;
wire   [63:0] tmp_64_fu_284_p1;
wire   [63:0] tmp_62_fu_274_p1;
wire   [63:0] tmp_60_fu_484_p1;
wire  signed [11:0] p_Val2_33_cast_fu_224_p1;
wire   [11:0] this_assign_1_fu_463_p3;
wire   [0:0] tmp_61_fu_489_p2;
wire   [5:0] tmp_85_fu_196_p4;
wire   [0:0] tmp_86_fu_210_p1;
wire  signed [6:0] p_Val2_32_cast_cas_fu_206_p1;
wire   [6:0] tmp_cast_cast_fu_214_p1;
wire   [6:0] p_Val2_23_fu_218_p2;
wire   [14:0] j1_cast5_fu_258_p1;
wire   [14:0] tmp_63_fu_279_p2;
wire   [19:0] tmp_65_fu_299_p3;
wire  signed [20:0] tmp_89_cast_fu_307_p1;
(* use_dsp48 = "no" *) wire   [20:0] p_Val2_26_fu_311_p2;
wire   [11:0] tmp_66_fu_342_p1;
wire   [11:0] p_Val2_28_fu_345_p2;
wire   [0:0] newsignbit_fu_350_p3;
wire   [0:0] tmp_67_fu_358_p2;
wire   [0:0] p_Result_16_not_fu_369_p2;
wire   [0:0] not_carry_fu_374_p2;
wire   [0:0] carry_fu_364_p2;
wire   [0:0] deleted_zeros_fu_380_p2;
wire   [0:0] p_not_i_i_fu_395_p2;
wire   [0:0] brmerge_i_i_fu_401_p2;
wire   [0:0] tmp_68_fu_385_p2;
wire   [0:0] p_38_i_i_fu_390_p2;
wire   [0:0] brmerge40_demorgan_i_fu_413_p2;
wire   [0:0] tmp1_demorgan_fu_418_p2;
wire   [0:0] underflow_fu_424_p2;
wire   [0:0] overflow_fu_407_p2;
wire   [0:0] tmp2_fu_435_p2;
wire   [0:0] brmerge_i_i_i_fu_429_p2;
wire   [0:0] underflow_not_fu_441_p2;
wire   [11:0] p_Val2_33_mux_fu_447_p3;
wire   [11:0] p_Val2_s_39_fu_455_p3;
wire  signed [11:0] p_Val2_25_fu_495_p1;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

densifyto64_biasefYi #(
    .DataWidth( 7 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
biases_dense64_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(biases_dense64_V_address0),
    .ce0(biases_dense64_V_ce0),
    .q0(biases_dense64_V_q0)
);

densifyto64_weighg8j #(
    .DataWidth( 9 ),
    .AddressRange( 21952 ),
    .AddressWidth( 15 ))
weights_dense64_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_dense64_V_address0),
    .ce0(weights_dense64_V_ce0),
    .q0(weights_dense64_V_q0)
);

dev_digits_classihbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 21 ))
dev_digits_classihbi_U10(
    .din0(weights_dense64_V_lo_reg_560),
    .din1(p_Val2_25_fu_495_p1),
    .dout(p_Val2_25_fu_495_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i2_reg_168 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i2_reg_168 <= i_5_reg_598;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_145 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond7_fu_262_p2 == 1'd1))) begin
        i_reg_145 <= i_4_reg_522;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j1_reg_157 <= j_4_reg_545;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j1_reg_157 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_134 <= j_3_reg_504;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_134 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        OP1_V_reg_537 <= OP1_V_fu_254_p1;
        tmp_59_reg_532[14 : 6] <= tmp_59_fu_246_p3[14 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_4_reg_522 <= i_4_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_5_reg_598 <= i_5_fu_478_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_3_reg_504 <= j_3_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_4_reg_545 <= j_4_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_472_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        out_V_addr_1_reg_603 <= tmp_60_fu_484_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond7_fu_262_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        out_V_addr_2_reg_555 <= tmp_62_fu_274_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        p_Val2_25_reg_565 <= p_Val2_25_fu_495_p2;
        tmp_88_reg_570 <= p_Val2_25_fu_495_p2[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        p_Val2_27_reg_584 <= {{p_Val2_26_fu_311_p2[19:8]}};
        signbit_reg_575 <= p_Val2_26_fu_311_p2[32'd20];
        tmp_89_reg_589 <= p_Val2_26_fu_311_p2[32'd19];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_509[6 : 0] <= tmp_fu_191_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        weights_dense64_V_lo_reg_560 <= weights_dense64_V_q0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state11) & (exitcond_fu_472_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (exitcond_fu_472_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        biases_dense64_V_ce0 = 1'b1;
    end else begin
        biases_dense64_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        in_V_ce0 = 1'b1;
    end else begin
        in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        out_V_address0 = out_V_addr_1_reg_603;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        out_V_address0 = tmp_60_fu_484_p1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        out_V_address0 = out_V_addr_2_reg_555;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_V_address0 = tmp_reg_509;
    end else begin
        out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state8))) begin
        out_V_ce0 = 1'b1;
    end else begin
        out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        out_V_d0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        out_V_d0 = this_assign_1_fu_463_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        out_V_d0 = p_Val2_33_cast_fu_224_p1;
    end else begin
        out_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state3) | ((tmp_61_fu_489_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12)))) begin
        out_V_we0 = 1'b1;
    end else begin
        out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        weights_dense64_V_ce0 = 1'b1;
    end else begin
        weights_dense64_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond5_fu_179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond6_fu_229_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond7_fu_262_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (exitcond_fu_472_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_fu_254_p1 = $signed(in_V_q0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign biases_dense64_V_address0 = tmp_fu_191_p1;

assign brmerge40_demorgan_i_fu_413_p2 = (signbit_reg_575 & newsignbit_fu_350_p3);

assign brmerge_i_i_fu_401_p2 = (p_not_i_i_fu_395_p2 | newsignbit_fu_350_p3);

assign brmerge_i_i_i_fu_429_p2 = (underflow_fu_424_p2 | overflow_fu_407_p2);

assign carry_fu_364_p2 = (tmp_89_reg_589 & tmp_67_fu_358_p2);

assign deleted_zeros_fu_380_p2 = (signbit_reg_575 ^ not_carry_fu_374_p2);

assign exitcond5_fu_179_p2 = ((j_reg_134 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond6_fu_229_p2 = ((i_reg_145 == 9'd343) ? 1'b1 : 1'b0);

assign exitcond7_fu_262_p2 = ((j1_reg_157 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond_fu_472_p2 = ((i2_reg_168 == 7'd64) ? 1'b1 : 1'b0);

assign i_4_fu_235_p2 = (i_reg_145 + 9'd1);

assign i_5_fu_478_p2 = (i2_reg_168 + 7'd1);

assign in_V_address0 = tmp_s_fu_241_p1;

assign j1_cast5_fu_258_p1 = j1_reg_157;

assign j_3_fu_185_p2 = (j_reg_134 + 7'd1);

assign j_4_fu_268_p2 = (j1_reg_157 + 7'd1);

assign newsignbit_fu_350_p3 = p_Val2_28_fu_345_p2[32'd11];

assign not_carry_fu_374_p2 = (p_Result_16_not_fu_369_p2 | newsignbit_fu_350_p3);

assign overflow_fu_407_p2 = (tmp_68_fu_385_p2 & brmerge_i_i_fu_401_p2);

assign p_38_i_i_fu_390_p2 = (signbit_reg_575 & carry_fu_364_p2);

assign p_Result_16_not_fu_369_p2 = (tmp_89_reg_589 ^ 1'd1);

assign p_Val2_23_fu_218_p2 = ($signed(p_Val2_32_cast_cas_fu_206_p1) + $signed(tmp_cast_cast_fu_214_p1));

assign p_Val2_25_fu_495_p1 = OP1_V_reg_537;

assign p_Val2_26_fu_311_p2 = ($signed(p_Val2_25_reg_565) + $signed(tmp_89_cast_fu_307_p1));

assign p_Val2_28_fu_345_p2 = (tmp_66_fu_342_p1 + p_Val2_27_reg_584);

assign p_Val2_32_cast_cas_fu_206_p1 = $signed(tmp_85_fu_196_p4);

assign p_Val2_33_cast_fu_224_p1 = $signed(p_Val2_23_fu_218_p2);

assign p_Val2_33_mux_fu_447_p3 = ((brmerge_i_i_i_fu_429_p2[0:0] === 1'b1) ? 12'd2047 : p_Val2_28_fu_345_p2);

assign p_Val2_s_39_fu_455_p3 = ((underflow_fu_424_p2[0:0] === 1'b1) ? 12'd2048 : p_Val2_28_fu_345_p2);

assign p_not_i_i_fu_395_p2 = (deleted_zeros_fu_380_p2 ^ 1'd1);

assign this_assign_1_fu_463_p3 = ((underflow_not_fu_441_p2[0:0] === 1'b1) ? p_Val2_33_mux_fu_447_p3 : p_Val2_s_39_fu_455_p3);

assign tmp1_demorgan_fu_418_p2 = (p_38_i_i_fu_390_p2 | brmerge40_demorgan_i_fu_413_p2);

assign tmp2_fu_435_p2 = (tmp_68_fu_385_p2 | newsignbit_fu_350_p3);

assign tmp_59_fu_246_p3 = {{i_reg_145}, {6'd0}};

assign tmp_60_fu_484_p1 = i2_reg_168;

assign tmp_61_fu_489_p2 = (($signed(out_V_q0) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign tmp_62_fu_274_p1 = j1_reg_157;

assign tmp_63_fu_279_p2 = (j1_cast5_fu_258_p1 + tmp_59_reg_532);

assign tmp_64_fu_284_p1 = tmp_63_fu_279_p2;

assign tmp_65_fu_299_p3 = {{out_V_q0}, {8'd0}};

assign tmp_66_fu_342_p1 = tmp_88_reg_570;

assign tmp_67_fu_358_p2 = (newsignbit_fu_350_p3 ^ 1'd1);

assign tmp_68_fu_385_p2 = (signbit_reg_575 ^ 1'd1);

assign tmp_85_fu_196_p4 = {{biases_dense64_V_q0[6:1]}};

assign tmp_86_fu_210_p1 = biases_dense64_V_q0[0:0];

assign tmp_89_cast_fu_307_p1 = $signed(tmp_65_fu_299_p3);

assign tmp_cast_cast_fu_214_p1 = tmp_86_fu_210_p1;

assign tmp_fu_191_p1 = j_reg_134;

assign tmp_s_fu_241_p1 = i_reg_145;

assign underflow_fu_424_p2 = (tmp1_demorgan_fu_418_p2 ^ signbit_reg_575);

assign underflow_not_fu_441_p2 = (tmp2_fu_435_p2 | p_38_i_i_fu_390_p2);

assign weights_dense64_V_address0 = tmp_64_fu_284_p1;

always @ (posedge ap_clk) begin
    tmp_reg_509[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_59_reg_532[5:0] <= 6'b000000;
end

endmodule //densifyto64
