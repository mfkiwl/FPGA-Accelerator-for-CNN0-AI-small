// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XDEV_DIGITS_CLASSIFY_H
#define XDEV_DIGITS_CLASSIFY_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xdev_digits_classify_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 A_BaseAddress;
} XDev_digits_classify_Config;
#endif

typedef struct {
    u32 A_BaseAddress;
    u32 IsReady;
} XDev_digits_classify;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XDev_digits_classify_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XDev_digits_classify_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XDev_digits_classify_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XDev_digits_classify_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XDev_digits_classify_Initialize(XDev_digits_classify *InstancePtr, u16 DeviceId);
XDev_digits_classify_Config* XDev_digits_classify_LookupConfig(u16 DeviceId);
int XDev_digits_classify_CfgInitialize(XDev_digits_classify *InstancePtr, XDev_digits_classify_Config *ConfigPtr);
#else
int XDev_digits_classify_Initialize(XDev_digits_classify *InstancePtr, const char* InstanceName);
int XDev_digits_classify_Release(XDev_digits_classify *InstancePtr);
#endif

void XDev_digits_classify_Start(XDev_digits_classify *InstancePtr);
u32 XDev_digits_classify_IsDone(XDev_digits_classify *InstancePtr);
u32 XDev_digits_classify_IsIdle(XDev_digits_classify *InstancePtr);
u32 XDev_digits_classify_IsReady(XDev_digits_classify *InstancePtr);
void XDev_digits_classify_EnableAutoRestart(XDev_digits_classify *InstancePtr);
void XDev_digits_classify_DisableAutoRestart(XDev_digits_classify *InstancePtr);

u32 XDev_digits_classify_Get_input_V_BaseAddress(XDev_digits_classify *InstancePtr);
u32 XDev_digits_classify_Get_input_V_HighAddress(XDev_digits_classify *InstancePtr);
u32 XDev_digits_classify_Get_input_V_TotalBytes(XDev_digits_classify *InstancePtr);
u32 XDev_digits_classify_Get_input_V_BitWidth(XDev_digits_classify *InstancePtr);
u32 XDev_digits_classify_Get_input_V_Depth(XDev_digits_classify *InstancePtr);
u32 XDev_digits_classify_Write_input_V_Words(XDev_digits_classify *InstancePtr, int offset, int *data, int length);
u32 XDev_digits_classify_Read_input_V_Words(XDev_digits_classify *InstancePtr, int offset, int *data, int length);
u32 XDev_digits_classify_Write_input_V_Bytes(XDev_digits_classify *InstancePtr, int offset, char *data, int length);
u32 XDev_digits_classify_Read_input_V_Bytes(XDev_digits_classify *InstancePtr, int offset, char *data, int length);
u32 XDev_digits_classify_Get_softmax_out_V_BaseAddress(XDev_digits_classify *InstancePtr);
u32 XDev_digits_classify_Get_softmax_out_V_HighAddress(XDev_digits_classify *InstancePtr);
u32 XDev_digits_classify_Get_softmax_out_V_TotalBytes(XDev_digits_classify *InstancePtr);
u32 XDev_digits_classify_Get_softmax_out_V_BitWidth(XDev_digits_classify *InstancePtr);
u32 XDev_digits_classify_Get_softmax_out_V_Depth(XDev_digits_classify *InstancePtr);
u32 XDev_digits_classify_Write_softmax_out_V_Words(XDev_digits_classify *InstancePtr, int offset, int *data, int length);
u32 XDev_digits_classify_Read_softmax_out_V_Words(XDev_digits_classify *InstancePtr, int offset, int *data, int length);
u32 XDev_digits_classify_Write_softmax_out_V_Bytes(XDev_digits_classify *InstancePtr, int offset, char *data, int length);
u32 XDev_digits_classify_Read_softmax_out_V_Bytes(XDev_digits_classify *InstancePtr, int offset, char *data, int length);

void XDev_digits_classify_InterruptGlobalEnable(XDev_digits_classify *InstancePtr);
void XDev_digits_classify_InterruptGlobalDisable(XDev_digits_classify *InstancePtr);
void XDev_digits_classify_InterruptEnable(XDev_digits_classify *InstancePtr, u32 Mask);
void XDev_digits_classify_InterruptDisable(XDev_digits_classify *InstancePtr, u32 Mask);
void XDev_digits_classify_InterruptClear(XDev_digits_classify *InstancePtr, u32 Mask);
u32 XDev_digits_classify_InterruptGetEnabled(XDev_digits_classify *InstancePtr);
u32 XDev_digits_classify_InterruptGetStatus(XDev_digits_classify *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
